1. Create Table => CREATE TABLE Students (id INT, name STR, dept STR)
2. Drop Table (Table not found error) => DROP TABLE Stud
3. Drop Table => DROP TABLE Students
4. Create Table again => CREATE TABLE Students (id INT, name STR, dept STR)
5. Describe Table (Table not found error) => DESCRIBE students
6. Describe Table => DESCRIBE Students
7. Insert in table => INSERT INTO Students VALUES (1, Aka, CS)
8. Insert in table (Table not found error) => INSERT INTO Stud VALUES (2, Amol, CS)
9. Insert in table => INSERT INTO Students VALUES (2, Amol, CS)
10. Insert in table (Invalid number of values) => INSERT INTO Students VALUES (3, Ansh, CS)
11. Insert in table => INSERT INTO Students VALUES (3, Ansh, CS)
12. Insert in table => INSERT INTO Students VALUES (4, Yath, CS)
Note => As we are dealing with strings int isn't been checked.
13. Delete id >= 3 => DELETE FROM Students WHERE id>=3
14. Delete name = Aka =>  DELETE FROM Students WHERE name=Aka
15. Add a ENTC student => INSERT INTO Students VALUES (5, Temp, ENTC)
16. Keep only CS students => DELETE FROM Students WHERE dept!=CS
17. Invalid operator Error => DELETE FROM Students WHERE name>Ansh
17. Delete all values (Invalid Table name) => DELETE FROM Stud
18. Delete all values => DELETE FROM Students
19. Insert the Table Again

INSERT INTO Students VALUES (1, Aka, CS)
INSERT INTO Students VALUES (2, Amol, CS)
INSERT INTO Students VALUES (3, Ansh, CS)
INSERT INTO Students VALUES (4, Yath, CS)

OR

"id","name","dept"
"1","Aka","CS"
"2","Amol","CS"
"3","Ansh","CS"
"4","Yath","CS"


20. Use OR for delete => DELETE FROM Students WHERE id=1 OR name=Yath
21. Use AND for delete => DELETE FROM Students WHERE id=3 AND name=Ansh
22. Use invalid operator => DELETE FROM Students WHERE id=1 OR name>Yath
23. Use invalid operator with AND => DELETE FROM Students WHERE id=3 AND name>Yath

24. Insert the Table Again

INSERT INTO Students VALUES (1, Aka, CS)
INSERT INTO Students VALUES (2, Amol, CS)
INSERT INTO Students VALUES (3, Ansh, CS)
INSERT INTO Students VALUES (4, Yath, CS)

OR

"id","name","dept"
"1","Aka","CS"
"2","Amol","CS"
"3","Ansh","CS"
"4","Yath","CS"


25. Update name by using id => UPDATE Students SET name=Akanksha WHERE id=1
26. Update name by using name => UPDATE Students SET name=Yatharth WHERE name=Yath
27. Same error checkings shown above applicable here too. (Table name, etc.)
28. Change dept to ENTC => UPDATE Students SET dept=ENTC WHERE id=1 OR name=Ansh
29. Change Ansh's dept to CS back (Not the right command) => UPDATE Students SET dept=CS WHERE id=3 AND name=Yatharth
30. Change Ansh's dept to CS back => UPDATE Students SET dept=CS WHERE id=3 AND name=Ansh
31. Change Aka's dept to CS back => UPDATE Students SET dept=CS WHERE name=Akanksha AND dept!=CS
32. Change name to Amol without Where clause => UPDATE Students SET name=Amol

33. Reverting back the changes =>

DELETE FROM Students
INSERT INTO Students VALUES (1, Aka, CS)
INSERT INTO Students VALUES (2, Amol, CS)
INSERT INTO Students VALUES (3, Ansh, CS)
INSERT INTO Students VALUES (4, Yath, CS)

OR

"id","name","dept"
"1","Aka","CS"
"2","Amol","CS"
"3","Ansh","CS"
"4","Yath","CS"

34. Select all for name yath => SELECT * FROM Students WHERE name=Yath
35. Select name, dept for id=3 => SELECT name, dept FROM Students WHERE id=3
36. Select all => SELECT * FROM Students
37. SELECT * FROM Students WHERE id=2 AND dept=CS
38. SELECT * FROM Students WHERE id=1 OR name=Yath
39. Doubt (Nothing Selected) => SELECT * FROM Students WHERE id=1 AND name=Ansh
40. SELECT * FROM Students WHERE id=3 AND name=Ansh

41. Create new Table (Table exists already) => CREATE TABLE Students (id INT, name STR)
42. Create new Table => CREATE TABLE Dept (id INT, name STR)
43. DESCRIBE Dept
44. HELP TABLES
45. (Invalid Command) => HELP SELEC
46. HELP SELECT
47. QUIT

// To Do

CREATE TABLE Dept (id INT, name STR)
CREATE TABLE Students (id INT CHECK (id>0), name STR, dept STR, PRIMARY KEY (id), FOREIGN KEY (dept) REFERENCES Depts (name))
INSERT INTO Students VALUES (1, Aka, CS)

CREATE TABLE table_name ( attribute_1 attribute1_type CHECK (constraint1),
attribute_2 attribute2_type, …, PRIMARY KEY ( attribute_1, attribute_2 ),
FOREIGN KEY ( attribute_y ) REFERENCES table_x ( attribute_t ), FOREIGN
KEY ( attribute_w ) REFERENCES table_y ( attribute_z )… );

Students id INT ID>0 PRIMARY KEY name STR dept STR Foreign key REFERENCES Depts(name)

snum -- int -- primary key -- snum>0
sname -- char(30)
age -- int -- age > 0 AND age < 100
deptid -- int -- foreign key references Department(deptid)

UNIQUE
NOT NULL
CHECK

PK
FK